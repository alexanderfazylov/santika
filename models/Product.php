<?php

namespace app\models;

use app\models\scopes\ProductScope;
use Yii;
use yii\helpers\Inflector;

/**
 * This is the model class for table "product".
 *
 * @property integer $id
 * @property integer $shop_id
 * @property integer $collection_id
 * @property integer $category_id
 * @property integer $manual_id
 * @property integer $coat_id
 * @property integer $drawing_id
 * @property integer $photo_id
 * @property string $article
 * @property string $name
 * @property string $description
 * @property integer $length
 * @property integer $width
 * @property integer $height
 * @property integer $is_promotion
 * @property string $url
 * @property string $meta_title
 * @property string $meta_description
 * @property string $meta_keywords
 *
 * @property LineProduct[] $lineProducts
 * @property Category $category
 * @property Collection $collection
 * @property Shop $shop
 */
class Product extends \yii\db\ActiveRecord
{
    public $line_ids = [];
    public $photo_tmp;
    public $manual_tmp;
    public $drawing_tmp;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'product';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['shop_id', 'article', 'name', 'description', 'url'], 'required'],
            [['shop_id', 'collection_id', 'category_id', 'manual_id', 'coat_id', 'drawing_id', 'photo_id', 'length', 'width', 'height', 'is_promotion'], 'integer'],
            [['article', 'name', 'description', 'url', 'meta_title', 'meta_description', 'meta_keywords'], 'string', 'max' => 255],
            [['line_ids', 'photo_tmp', 'manual_tmp', 'drawing_tmp'], 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'shop_id' => 'Салон', //Yii::t('app', 'Shop ID'),
            'shop.name' => 'Салон',
            'collection_id' => 'Коллекция', // Yii::t('app', 'Collection ID'),
            'collection.name' => 'Коллекция', // Yii::t('app', 'Collection ID'),
            'collection_name' => 'Коллекция', // Yii::t('app', 'Collection ID'),
            'category_id' => 'Категория', //Yii::t('app', 'Category ID'),
            'category.name' => 'Категория', //Yii::t('app', 'Category ID'),
            'category_name' => 'Категория', //Yii::t('app', 'Category ID'),
            'photo.fileLink' => 'Фото',
            'photo_id' => 'Фото',
            'manual.fileLink' => 'Инструкция',
            'manual_id' => 'Инструкция',
            'drawing.fileLink' => 'Чертеж',
            'drawing_id' => 'Чертеж',
            'coat_id' => Yii::t('app', 'Coat ID'),
            'article' => 'Артикул', //Yii::t('app', 'Article'),
            'name' => 'Наименование', //Yii::t('app', 'Name'),
            'description' => 'Описание', //Yii::t('app', 'Description'),
            'length' => 'Длина', // Yii::t('app', 'Length'),
            'width' => 'Ширина', // Yii::t('app', 'Width'),
            'height' => 'Высота', // Yii::t('app', 'Height'),
            'is_promotion' => 'Отображать на главной странице', //Yii::t('app', 'Is Promotion'),
            'url' => Yii::t('app', 'Url'),
            'meta_title' => Yii::t('app', 'Meta Title'),
            'meta_description' => Yii::t('app', 'Meta Description'),
            'meta_keywords' => Yii::t('app', 'Meta Keywords'),
        ];
    }

    /**
     * Сохраняет файл из временной папки в Uploads
     * @param $attribute
     */
    public function saveFileFromAttribute($attribute)
    {
        $attr_tmp = $attribute . '_tmp';
        $attr_id = $attribute . '_id';

        if (!empty($this->$attr_tmp)) {
            if (empty($this->$attr_id)) {
                $upload = new Upload();
            } else {
                $upload = Upload::findOne($this->$attr_id);
            }

            $upload->name = $this->$attr_tmp;
            $upload->path = Upload::getUploadsPathByType(1, $upload->name);

            $source = Upload::getTmpUploadsPath() . $upload->name;
            $dest = Upload::getUploadsPath() . $upload->path;
            if (!copy($source, $dest)) {

            }
            $upload->ext = '';
            $upload->save();
            $this->$attr_id = $upload->id;
        }
    }

    public function beforeValidate()
    {
        $this->saveFileFromAttribute('photo');
        $this->saveFileFromAttribute('drawing');
        $this->saveFileFromAttribute('manual');

        $this->url = Inflector::slug($this->name);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }


    /**
     * @inheritdoc
     * @return ProductScope
     */
    public static function find()
    {
        return new ProductScope(get_called_class());
    }

    public function afterSave($insert)
    {
        /**
         * @TODO проверить работу, мб в других местах будут баги
         */
        LineProduct::deleteAll(['product_id' => $this->id]);
        foreach ($this->line_ids as $line_id) {
            $lp = new LineProduct();
            $lp->product_id = $this->id;
            $lp->line_id = $line_id;
            if (!$lp->save()) {
                var_dump($lp->getErrors());
                exit();
            }
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLineProducts()
    {
        return $this->hasMany(LineProduct::className(), ['product_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCollection()
    {
        return $this->hasOne(Collection::className(), ['id' => 'collection_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getShop()
    {
        return $this->hasOne(Shop::className(), ['id' => 'shop_id']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPhoto()
    {
        return $this->hasOne(Upload::className(), ['id' => 'photo_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getManual()
    {
        return $this->hasOne(Upload::className(), ['id' => 'manual_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDrawing()
    {
        return $this->hasOne(Upload::className(), ['id' => 'drawing_id']);
    }
}
